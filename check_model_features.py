#!/usr/bin/env python3
"""
Script para verificar exactamente qu√© caracter√≠sticas espera el modelo
"""

import pickle
import numpy as np

def check_model_features():
    """Verificar las caracter√≠sticas que espera el modelo"""
    print("=" * 60)
    print("VERIFICACI√ìN DE CARACTER√çSTICAS DEL MODELO")
    print("=" * 60)
    
    try:
        # Cargar modelo
        with open('modelos/prediccion_corners_totales.pkl', 'rb') as f:
            model = pickle.load(f)
        
        print(f"‚úÖ Modelo cargado: {type(model)}")
        
        # Verificar caracter√≠sticas esperadas
        if hasattr(model, 'n_features_in_'):
            print(f"üìä Caracter√≠sticas esperadas por el modelo: {model.n_features_in_}")
        
        if hasattr(model, 'feature_names_in_'):
            print(f"üìã Nombres de caracter√≠sticas esperadas:")
            for i, name in enumerate(model.feature_names_in_):
                print(f"   {i+1:2d}. {name}")
        
        # Intentar diferentes tama√±os para encontrar el correcto
        print(f"\nüîç Probando diferentes tama√±os de caracter√≠sticas...")
        for n_features in [16, 17, 18, 19, 20]:
            try:
                test_data = np.random.random((1, n_features))
                prediction = model.predict(test_data)
                print(f"‚úÖ Modelo acepta {n_features} caracter√≠sticas - Predicci√≥n: {prediction[0]:.2f}")
                break
            except Exception as e:
                print(f"‚ùå {n_features} caracter√≠sticas fall√≥: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando modelo: {e}")
        return False

def main():
    """Funci√≥n principal"""
    check_model_features()

if __name__ == "__main__":
    main()
